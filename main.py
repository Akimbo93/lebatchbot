import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ParseMode
from threading import Thread
from flask import Flask
from parser import checkfresh_parser  # –∏–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_TOKEN_HERE')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥–ª—É—à–∫–∞ Flask –¥–ª—è Render / Ping
app = Flask(__name__)

@app.route('/')
def index():
    return "LeBatch is alive"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëÉ –ü—Ä–∏–≤–µ—Ç! –Ø LeBatch ‚Äî –Ω—é—Ö–∞—á, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –±–∞—Ç—á-–∫–æ–¥—ã. –ù–∞–ø–∏—à–∏ –º–Ω–µ –±–∞—Ç—á-–∫–æ–¥, –∏ —è —Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –∞—Ä–æ–º–∞—Ç —Ä–æ–¥–∏–ª—Å—è.")

@dp.message_handler()
async def handle_batch(message: types.Message):
    code = message.text.strip().upper()
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –±–∞—Ç—á-–∫–æ–¥...")

    # –ü–æ–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±—Ä–µ–Ω–¥ Chanel ‚Äî –¥–∞–ª—å—à–µ —Å–¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    brand = "chanel"
    result = checkfresh_parser(brand, code)

    if result["status"] == "ok":
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ:\n\n{result['result']}")
    elif result["status"] == "not_found":
        await message.answer("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø–æ —ç—Ç–æ–º—É –±–∞—Ç—á—É.")
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:\n{result['result']}")

if __name__ == '__main__':
    Thread(target=run_flask).start()
    executor.start_polling(dp, skip_updates=True)
